rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidEmail() {
      return request.auth.token.email != null && 
             request.auth.token.email_verified == true;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Prevent user deletion
    }
    
    // Questions collection (public read)
    match /questions/{questionId} {
      allow read: if true; // Public access for questions
      allow write: if false; // Only admin can write
    }
    
    // Categories collection (public read)
    match /categories/{categoryId} {
      allow read: if true; // Public access for categories
      allow write: if false; // Only admin can write
    }
    
    // User progress collection
    match /userProgress/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
      
      // Subcollections
      match /testResults/{resultId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
      }
      
      match /categoryProgress/{categoryId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
      }
    }
    
    // User answers collection
    match /userAnswers/{userId}/answers/{answerId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}